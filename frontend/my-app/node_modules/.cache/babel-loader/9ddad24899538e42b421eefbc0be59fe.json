{"ast":null,"code":"var _jsxFileName = \"C:\\\\E-Learning project\\\\Frontend\\\\my-app\\\\src\\\\Pages\\\\ChapterContent\\\\CsharpIdentifiers.js\";\nimport React from 'react';\nimport ReactPlayer from 'react-player';\nimport './index.css';\nimport ContentNavi from '../../Components/Navbar/ContentNavi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Identifires = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Content\",\n    children: [/*#__PURE__*/_jsxDEV(ContentNavi, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"C# Identifiers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In programming languages, identifiers are used for identification purposes. Or in other words, identifiers are the user-defined name of the program components. In C#, an identifier can be a class name, method name, variable name or label.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Rules for defining identifiers in C#:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are certain valid rules for defining a valid C# identifier. These rules should be followed, otherwise, we will get a compile-time error. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"The only allowed characters for identifiers are all alphanumeric characters([A-Z], [a-z], [0-9]), \\u2018_\\u2018 (underscore). For example \\u201Cgeek@\\u201D is not a valid C# identifier as it contain \\u2018@\\u2019 \\u2013 special character.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Identifiers should not start with digits([0-9]). For example \\u201C123geeks\\u201D is a not a valid in C# identifier.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Identifiers should not contain white spaces.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"C# identifiers are case-sensitive.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"C# identifiers allow Unicode Characters.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Identifiers are not allowed to use as keyword unless they include @ as a prefix. For example, @as is a valid identifier, but \\u201Cas\\u201D is not because it is a keyword.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"C# identifiers cannot contain more than 512 characters.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Identifiers does not contain two consecutive underscores in its name because such types of identifiers are used for the implementation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      controls: true,\n      children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: \"https://www.youtube.com/watch?v=ctF7cdGdy68\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Identifires;\nexport default Identifires;\n\nvar _c;\n\n$RefreshReg$(_c, \"Identifires\");","map":{"version":3,"sources":["C:/E-Learning project/Frontend/my-app/src/Pages/ChapterContent/CsharpIdentifiers.js"],"names":["React","ReactPlayer","ContentNavi","Identifires"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,aAAP;AACA,OAAOC,WAAP,MAAwB,qCAAxB;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AACxB,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFL,eAGK;AAAA;AAAA;AAAA;AAAA,YAHL,oBAGW;AAAA;AAAA;AAAA;AAAA,YAHX,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAoBI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,QAAQ,MAAhC;AAAA,6BACQ,QAAC,WAAD;AAAa,QAAA,GAAG,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAtCD;;KAAMA,W;AAwCN,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport ReactPlayer from 'react-player';\r\nimport './index.css'\r\nimport ContentNavi from '../../Components/Navbar/ContentNavi';\r\n\r\n\r\nconst Identifires = () => {\r\n  return (\r\n    <div className='Content'>\r\n      <ContentNavi/>\r\n         <h1>C# Identifiers</h1>\r\n         <br/> <br/>\r\n         \r\n        <p>In programming languages, identifiers are used for identification purposes. Or in other words, identifiers are the user-defined name of the program components. In C#, an identifier can be a class name, method name, variable name or label.</p>\r\n\r\n        <h3>Rules for defining identifiers in C#:</h3>\r\n        <p>There are certain valid rules for defining a valid C# identifier. These rules should be followed, otherwise, we will get a compile-time error. </p>\r\n        <ul>\r\n            <li>The only allowed characters for identifiers are all alphanumeric characters([A-Z], [a-z], [0-9]), ‘_‘ (underscore). For example “geek@” is not a valid C# identifier as it contain ‘@’ – special character.</li>\r\n            <li>Identifiers should not start with digits([0-9]). For example “123geeks” is a not a valid in C# identifier.</li>\r\n            <li>Identifiers should not contain white spaces.</li>\r\n            <li>C# identifiers are case-sensitive.</li>\r\n            <li>C# identifiers allow Unicode Characters.</li>\r\n            <li>Identifiers are not allowed to use as keyword unless they include @ as a prefix. For example, @as is a valid identifier, but “as” is not because it is a keyword.</li>\r\n            <li>C# identifiers cannot contain more than 512 characters.</li>\r\n            <li>Identifiers does not contain two consecutive underscores in its name because such types of identifiers are used for the implementation.</li>\r\n        </ul>\r\n\r\n        <div className='player' controls>\r\n                <ReactPlayer url='https://www.youtube.com/watch?v=ctF7cdGdy68'/>\r\n            </div>\r\n\r\n        \r\n        \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Identifires;"]},"metadata":{},"sourceType":"module"}